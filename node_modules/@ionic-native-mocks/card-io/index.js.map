{"version":3,"sources":["../../../src/@ionic-native-mocks/plugins/card-io/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,uBAAuB,CAAC;AAuG/C;IAAiC,+BAAM;IAAvC;;IAgCA,CAAC;IA/BG;;;;;OAKG;IACH,6BAAO,GAAP;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,IAAI,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;;OAIG;IACH,0BAAI,GAAJ,UAAK,OAAuB;QACxB,IAAI,QAAwB,CAAC;QAC7B,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACF;;;OAGG;IACH,6BAAO,GAAP;QACI,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAAA,CAAC;IACN,kBAAC;AAAD,CAhCA,AAgCC,CAhCgC,MAAM,GAgCtC","file":"index.js","sourceRoot":"","sourcesContent":["import { CardIO } from '@ionic-native/card-io';\n\nexport interface CardIOOptions {\n    /**\n     * Set to true to require expiry date\n     */\n    requireExpiry?: boolean;\n    /**\n     * \tThe user will be prompted for the card CVV\n     */\n    requireCVV?: boolean;\n    /**\n     * The user will be prompted for the card billing postal code.\n     */\n    requirePostalCode?: boolean;\n    /**\n     * \tRemoves the keyboard button from the scan screen.\n     */\n    supressManual?: boolean;\n    /**\n     * The postal code will only collect numeric input. Set this if you know the expected country's postal code has only numeric postal codes.\n     */\n    restrictPostalCodeToNumericOnly?: boolean;\n    /**\n     * The theme for the card.io Activity's will be set to the theme of the application.\n     */\n    keepApplicationTheme?: boolean;\n    /**\n     * The user will be prompted for the cardholder name\n     */\n    requireCardholderName?: boolean;\n    /**\n     * Used to display instructions to the user while they are scanning their card.\n     */\n    scanInstructions?: string;\n    /**\n     * \tIf set, the card will not be scanned with the camera.\n     */\n    noCamera?: boolean;\n    /**\n     * If scanExpiry is true, an attempt to extract the expiry from the card image will be made.\n     */\n    scanExpiry?: boolean;\n    /**\n     * The preferred language for all strings appearing in the user interface. If not set, or if set to null, defaults to the device's current language setting.\n     */\n    languageOrLocale?: string;\n    /**\n     * Changes the color of the guide overlay on the camera. The color is provided in hexadecimal format (e.g. `#FFFFFF`)\n     */\n    guideColor?: string;\n    /**\n     * The user will not be prompted to confirm their card number after processing.\n     */\n    supressConfirmation?: boolean;\n    /**\n     * The card.io logo will not be shown overlaid on the camera.\n     */\n    hideCardIOLogo?: boolean;\n    /**\n     * The card.io logo will be shown instead of the PayPal logo.\n     */\n    useCardIOLogo?: boolean;\n    /**\n     * Once a card image has been captured but before it has been processed, this value will determine whether to continue processing as usual.\n     */\n    supressScan?: boolean;\n}\nexport interface CardIOResponse {\n    /**\n     * Card type\n     */\n    cardType: string;\n    /**\n     * Masked card number, showing only last 4 digits\n     */\n    redactedCardNumber: string;\n    /**\n     * Full card number\n     */\n    cardNumber: string;\n    /**\n     * Expiry month\n     */\n    expiryMonth: number;\n    /**\n     * Expiry year\n     */\n    expiryYear: number;\n    /**\n     * CVV\n     */\n    cvv: string;\n    /**\n     * Postal code\n     */\n    postalCode: string;\n    /**\n     * Cardholder name\n     */\n    cardholderName: string;\n}\n\nexport class CardIOMocks extends CardIO {\n    /**\n     * Check whether card scanning is currently available. (May vary by\n     * device, OS version, network connectivity, etc.)\n     *\n     * @returns {Promise<boolean>}\n     */\n    canScan(): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            resolve(true);\n        });\n    };\n    /**\n     * Scan a credit card with card.io.\n     * @param {CardIOOptions} options Options for configuring the plugin\n     * @returns {Promise<any>}\n     */\n    scan(options?: CardIOOptions): Promise<CardIOResponse> {\n        let response: CardIOResponse;\n        return new Promise((resolve, reject) => {\n            resolve(response);\n        });\n    };\n    /**\n     * Retrieve the version of the card.io library. Useful when contacting support.\n     * @returns {Promise<string>}\n     */\n    version(): Promise<string> {\n        return new Promise((resolve, reject) => {\n            resolve('');\n        });\n    };\n}\n"]}